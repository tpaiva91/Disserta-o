################################################################
# @configure_input@
#
# Build JPL.  Building JPL for Unix currently relies on the following
# assumptions:
#
#	* $JAVA_HOME points to the JDK top directory
#	* $PATH includes $JAVA_HOME/bin
#	* ELF Dynamic Linker semantics
#
# Author: Jan Wielemaker, based on shell-scripts from Paul Singleton.
################################################################

.SUFFIXES: .tex .dvi .doc .pl

ifeq (@PROLOG_SYSTEM@,yap)
prefix = @prefix@
exec_prefix = @exec_prefix@
ROOTDIR = $(prefix)
EROOTDIR = @exec_prefix@
abs_top_builddir = @abs_top_builddir@

srcdir=@srcdir@

BINDIR = $(EROOTDIR)/bin
LIBDIR=@libdir@
YAPLIBDIR=@libdir@/Yap
SHAREDIR=$(ROOTDIR)/share/Yap

SHELL=@SHELL@
PL=@INSTALL_ENV@ $(DESTDIR)$(BINDIR)/yap $(DESTDIR)$(YAPLIBDIR)/startup.yss
LN_S=@LN_S@
#
#
DEFS=@DEFS@ -D_YAP_NOT_INSTALLED_=1
CC=@CC@
CFLAGS= @SHLIB_CFLAGS@ $(YAP_EXTRAS) $(DEFS) -I$(srcdir) -I../.. -I$(srcdir)/../../include @CPPFLAGS@  @JAVAINCPATH@
LDFLAGS=@LDFLAGS@
MKINDEX=true
BINTARGET=$(DESTDIR)$(YAPLIBDIR)
PLTARGET=$(DESTDIR)$(SHAREDIR)
JARTARGET=$(DESTDIR)$(SHAREDIR)/jpl
PKGDOC=$(ROOTDIR)/share/doc/packages
EXDIR=$(PKGDOC)/examples/jpl

else	# SWI

PL=@PL@
PLBASE=@PLBASE@
PLARCH=@PLARCH@
PLINCL=@PLINCL@
PKGDOC=$(PLBASE)/doc/packages
EXDIR=$(PKGDOC)/examples/jpl
PCEHOME=../xpce

srcdir=.
SHAREDIR=$(LIBDIR)

JARTARGET=$(DESTDIR)$(PLBASE)/lib
BINTARGET=$(DESTDIR)$(PLBASE)/lib/$(PLARCH)
PLTARGET=$(DESTDIR)$(PLBASE)/library

endif	#YAP/SWI

JAVA_HOME="@JAVA_HOME@"
JAVAC="@JAVAC@"
JAVA="@JAVA@"
JUNIT="@JUNIT@"
JAVALIBS="@JAVALIBS@"

DOCTOTEX=$(PCEHOME)/bin/doc2tex
PLTOTEX=$(PCEHOME)/bin/pl2tex
DOC=jpl
TEX=$(DOC).tex
DVI=$(DOC).dvi
PDF=$(DOC).pdf
RUNTEX=../../man/runtex

INSTALL=@INSTALL@
INSTALL_PROGRAM=@INSTALL_PROGRAM@
INSTALL_DATA=@INSTALL_DATA@
INSTALL_SCRIPT=@INSTALL_SCRIPT@

LIBPL=		$(srcdir)/jpl.pl

ifeq (@PROLOG_SYSTEM@,yap)

LIBPL=		$(srcdir)/jpl.pl jpl_paths.yap

TARGETS=	libjpl.@SO@

all:		$(TARGETS) jpl.jar jpl_doc # exjava-compile 

OBJ=		libjpl.o

libjpl.o: $(srcdir)/src/c/jpl.c $(srcdir)/src/c/hacks.c
		$(CC) -c $(CFLAGS) $(srcdir)/src/c/jpl.c -o libjpl.o


@DO_SECOND_LD@%.@SO@: %.o
		@DO_SECOND_LD@	@SHLIB_LD@ $(LDFLAGS) -o $@ $< @JAVALIBPATH@ @EXTRA_LIBS_FOR_SWIDLLS@
		if [ -r libjpl.dylib ]; then \
		  rm -f libjpl.jnilib && ln -s libjpl.dylib libjpl.jnilib ; \
		fi

else	# SWI
TARGETS=	libjpl.@SO@

all:		$(TARGETS) jpl.jar exjava-compile jpl_doc

OBJ=		src/c/jpl.o

libjpl.@SO@:	$(OBJ)
		$(LD) $(LDFLAGS) -o $@ $(OBJ) $(JAVALIBS)
		if [ -r libjpl.dylib ]; then \
		  rm -f libjpl.jnilib && ln -s libjpl.dylib libjpl.jnilib ; \
		fi
endif

jpl.jar::
		(cd src/java && $(MAKE) jpl_jar)
jpl_doc::
		(cd src/java && $(MAKE) jpl_doc)

################################################################
# Verify the package
################################################################

check:		check_pl check_java

check_pl:	jpltest.jar
		$(PL) -q -f $(srcdir)/test_jpl.pl -g run_tests,halt -t 'halt(1)'
check_java:	jpltest.jar
		CLASSPATH=$(JUNIT):jpl.jar:jpltest.jar $(JAVA) junit.textui.TestRunner jpl.test.TestJUnit

jpltest.jar:
		(cd src/java && $(MAKE) test_jar)

################################################################
# Installation
################################################################

DOCDIRS=	$(scrdir) $(srcdir)/java_api $(srcdir)/java_api/javadoc $(srcdir)/java_api/javadoc/jpl \
		$(srcdir)/java_api/javadoc/jpl/class-use \
		$(srcdir)/java_api/javadoc/jpl/fli \
		$(srcdir)/java_api/javadoc/jpl/fli/class-use \
		$(srcdir)/java_api/javadoc/resources \
		$(srcdir)/prolog_api \
		$(srcdir)/prolog_api/overview
DOCFILES=	$(shell cd $(srcdir)/docs && find . -name '*.html' -o -name '*.gif' -o -name '*.jpg')

EXPL=		$(EXDIR)/prolog
EXPLS=		$(srcdir)/jpl_colour_choose_demo.pl \
		$(srcdir)/jpl_jlist_demo.pl \
		$(srcdir)/jpl_midi_demo.pl \
		$(srcdir)/jpl_table_demo.pl \
		$(srcdir)/jpl_text_entry_demo.pl \
		$(srcdir)/jpl_versions_demo.pl
EXJAVA=		$(EXDIR)/java
EXJAVAS=	Exceptions Exceptions2 Family FamilyMT Test Test2 Time \
		Versions Zahed SemWeb


install:	$(TARGETS) $(LIBPL) jpl.jar
		mkdir -p $(BINTARGET)
		mkdir -p $(JARTARGET)
		mkdir -p $(PLTARGET)
		for f in $(TARGETS); do \
		  $(INSTALL_PROGRAM) $$f $(BINTARGET); \
		done
ifeq (@SO@,dylib)		
		(cd $(BINTARGET) && ln -sf libjpl.@SO@ libjpl.jnilib)
endif
		for f in $(LIBPL); do \
		  $(INSTALL_DATA) $$f $(PLTARGET); \
		done
		$(INSTALL_DATA) jpl.jar $(JARTARGET)
		$(PL) -f none -g make -t halt

ln-install::
		@$(MAKE) INSTALL_DATA='../ln-install' install

rpm-install:	install html-install

html-install::	expl-install exjava-install
		mkdir -p $(DESTDIR)$(PKGDOC)/jpl
		@echo -n "Creating directories "
		@for d in $(DOCDIRS); do \
		    mkdir -p $(DESTDIR)$(PKGDOC)/jpl/$$d; echo -n .; \
		done
		@echo "ok"
		@echo -n "Copying documentation files "
		@for f in $(DOCFILES); do \
		    $(INSTALL_DATA) docs/$$f $(DESTDIR)$(PKGDOC)/jpl/$$f; echo -n .; \
		done
		@echo "ok"

expl-install::
		echo "Installing Prolog examples"
		mkdir -p $(DESTDIR)$(EXPL)
		@for f in $(EXPLS) README; do \
		    $(INSTALL_DATA) examples/prolog/$$f $(DESTDIR)$(EXPL)/$$f; \
		done

exjava-compile:	jpl.jar
		echo "Compiling Java examples"
		PL=`(cd .. && pwd)`/swipl.sh; export PL; \
		JPLJAR=`pwd`/jpl.jar; export JPLJAR; \
		for d in $(EXJAVAS); do \
		    (cd examples/java/$$d && env JPL_COMPILE_ONLY=yes ./run.sh); \
		done

exjava-install:	exjava-compile
		echo "Installing Java examples"
		mkdir -p $(DESTDIR)$(EXJAVA)
		$(INSTALL_DATA) examples/java/README $(DESTDIR)$(EXJAVA)
		$(INSTALL_DATA) examples/java/env.sh $(DESTDIR)$(EXJAVA)
		for d in $(EXJAVAS); do \
		    mkdir -p $(DESTDIR)$(EXJAVA)/$$d; \
		    $(INSTALL_SCRIPT) examples/java/$$d/run.sh $(DESTDIR)$(EXJAVA)/$$d ;\
		    $(INSTALL_DATA) examples/java/$$d/README $(DESTDIR)$(EXJAVA)/$$d ;\
		    $(INSTALL_DATA) examples/java/$$d/$$d.java $(DESTDIR)$(EXJAVA)/$$d ;\
		    plfile=`echo $$d.pl | tr A-Z a-z`; \
		    if [ -f examples/java/$$d/$$plfile ]; then \
			$(INSTALL_DATA) examples/java/$$d/$$plfile $(DESTDIR)$(EXJAVA)/$$d ;\
		    fi; \
		    $(INSTALL_DATA) examples/java/$$d/$$d*.class $(DESTDIR)$(EXJAVA)/$$d ;\
		done
		$(INSTALL_DATA) examples/java/SemWeb/test.rdf $(DESTDIR)$(EXJAVA)/SemWeb

pdf-install::
		mkdir -p $(DESTDIR)$(PKGDOC)
		$(INSTALL) -m 644 $(DOC).pdf $(DESTDIR)$(PKGDOC)

uninstall::
		(cd $(PLBASE)/lib/$(PLARCH) && rm -f $(TARGETS))
		(cd $(PLBASE)/library && rm -f $(LIBPL))
		$(PL) -f none -g make -t halt

################################################################
# Documentation
################################################################

pdf:		$(PDF)

$(DVI):		$(TEX)
		$(RUNTEX) $(DOC)

$(PDF):		$(TEX)
		$(RUNTEX) --pdf $(DOC)

html:		$(TEX)
		latex2html $(DOC)
		mv html/index.html $(DOC).html
		rm -r html

$(TEX):		$(DOCTOTEX)

.doc.tex:
		$(DOCTOTEX) $*.doc > $*.tex
.pl.tex:
		$(PLTOTEX) $*.pl > $*.tex

################################################################
# Clean
################################################################

clean:
		rm -f $(OBJ) *~ *.o *% a.out core config.log
		rm -f TestJPL.class
		find examples/java -name '*.class' -delete
		(cd src/java && $(MAKE) clean)

distclean:	clean
		rm -rf autom4te.cache
		rm -f $(TARGETS) config.cache config.h config.status Makefile
		rm -f $(DOC).aux $(DOC).log $(DOC).out $(DOC).toc
		rm -rf html
		(cd src/java && $(MAKE) distclean)

